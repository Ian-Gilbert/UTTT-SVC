# test and deploy service on push to main

name: release

env:
  CACHE_KEY_PREFIX: aspnet-uttt
  WORKING_DIRECTORY: aspnet

on:
  push:
    branches: 
      - main

jobs:
  restore:
    runs-on: ubuntu-latest
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2
      - name: dotnet_cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_restore
        run: dotnet restore
        working-directory: ${{ env.WORKING_DIRECTORY }}

  build:
    name: build_aspnet
    needs: restore
    runs-on: ubuntu-latest
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2
      - name: dotnet_cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_build
        run: dotnet build
        working-directory: ${{ env.WORKING_DIRECTORY }}
  
  test:
    name: test_aspnet
    needs: restore
    runs-on: ubuntu-latest
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2
      - name: dotnet_cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_test
        run: |
          dotnet test \
          --collect:"XPlat Code Coverage" \
          -r:CoverageResults \
          -l:trx \
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: coverage_upload
        uses: actions/upload-artifact@v2
        with:
          name: code_coverage
          path: ${{ env.WORKING_DIRECTORY }}/CoverageResults
  
  analyze:
    name: analyze_aspnet
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2
      - name: git_fetch
        run: git fetch --unshallow
      - name: coverage_download
        uses: actions/download-artifact@v2
        with:
          name: code_coverage
          path: ${{ env.WORKING_DIRECTORY }}/CoverageResults
      - name: sonar_install
        run: dotnet tool install --global dotnet-sonarscanner
      - name: dotnet_cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: sonar_scan
        run: |
          dotnet sonarscanner begin -k:Ultimate-Tic-Tac-Toe_uttt-svc -o:ultimate-tic-tac-toe -d:sonar.host.url='https://sonarcloud.io'
          dotnet build
          dotnet sonarscanner end
        working-directory: ${{ env.WORKING_DIRECTORY }}
  
  # pack:
  #   name: pack_aspnet
  #   runs-on: ubuntu-latest
  
  # deploy:
  #   name: deploy_aspnet
  #   runs-on: ubuntu-latest